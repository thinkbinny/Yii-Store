<?php
namespace common\models;
use yii\behaviors\TimestampBehavior;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;


class OrderRefund extends \yii\db\ActiveRecord{
    public $error;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%order_refund}}';
    }
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['refund_explain','image','remark'], 'trim'],
            [['order_id','order_sn','order_goods_id','uid','type','pay_money','refund_money','refund_deposit','refund_integral','refund_reason'], 'required'],
            [['order_id','order_goods_id','uid','model_type','type','refund_integral','is_delete','status','created_at','updated_at'], 'integer'],
            ['model_type', 'in', 'range' => [1, 2]],//1 已支付 未发货
            ['type', 'in', 'range' => [1, 2, 3]],
            ['is_delete', 'in', 'range' => [0,1]],
            ['status', 'in', 'range' => [-2,-1,0,1,2,3]],
            [['order_sn'], 'string', 'max' => 20],
            [['refund_reason'], 'string', 'max' => 50],
            [['operation'], 'string', 'max' => 500],
            [['refund_explain','image','remark'], 'string', 'max' => 250],
            [['pay_money','refund_money','refund_deposit'], 'double'],
            [['refund_explain','image','remark'], 'default', 'value' => ''],
            [['is_delete','status'], 'default', 'value' => 0],
        ];
    }

    /**
     * @inheritdoc
     */

    public function attributeLabels()
    {
        return [
            'id'                => '售后ID',
            'order_id'          => '订单ID',
            'order_sn'          => '订单编号',
            'order_goods_id'    => '订单商品ID',
            'uid'               => '用户UID',
            'type'              => '售后类型',//(1、退款、2退货退款、3换货)
            'pay_money'         => '订单付款金额',
            'refund_money'      => '商品单价',
            'refund_deposit'    => '退回金额',
            'refund_integral'   => '退还积分',

            'refund_integral_money'=>'积分抵消金额',
            'refund_coupon_money'=>'优惠券抵消金额',
            'refund_redbags_money'=>'红包抵消金额',

            'refund_reason'     => '退款类型',
            'refund_explain'    => '退款说明',
            'image'             => '上传凭证',//(多个逗号隔开)
            'operation'         => '操作记录',
            'remark'            => '客服备注',
            'is_delete'         => '是否删除',//(0正常,1已删除)
            'status'            => '处理状态',//'处理状态 审核意见', //(-2已取消,-1审核未通过,0待审核,1审核通过,2已发货,3已完成)
            'created_at'        => '创建时间',
            'updated_at'        => '更新时间',
        ];
    }

    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/30 14:18
     */
    public function behaviors() {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function scenarios()
    {
        $scenarios =  parent::scenarios(); // TODO: Change the autogenerated stub

        return $scenarios;
    }

    /**
     * @var array
     */
    public static $model_type = [
        1 => '退款订单',
        2 => '退换货订单'
    ];
    public function getModelTypeText(){
        return self::$model_type[$this->model_type];
    }
    /**
     * @var array
     */
    public static $refund_type = [
        1  => '不想买了',
        2  => '信息填写错误，重新拍',
        3  => '暂时缺货',
        4  => '见面交易',
        5  => '其他原因',

        6 => '不喜欢/不想要',
        7 => '空包裹',
        8 => '未按约定时间发货',
        9 => '快递/物流一直未送到',
        10=> '快递/物流无跟踪记录',
        11=> '货物破损已拒签',

        20 => '退运费',
        21 => '大小/尺寸/重量/厚度不符',
        22 => '颜色/图案/款式等不符',
        23 => '材质/面料与商品描述不符',
        24 => '做工瑕疵',
        25 => '质量问题',
        26 => '使用后过敏、红屁股',
        27 => '少件/漏发',
        28 => '包装/商品破损/污渍',
        29 => '未按约定时间发货',
        30 => '发错货',

        //仅退款
        50 => '缺货',
        51 => '协商一致退款',
        52 => '未按约定时间发货',
        53 => '拍错/多拍/不想要',
        54 => '其他',

    ];

    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/29 21:14
     */
    /*public function Apply($data){
        $data  = ArrayHelper::merge([

            'status'=>0,
        ],$data);
        $model = new  self();
        $model->setAttributes($data);
    }*/



    /**
     * 未发货
     * @param $order_id
     * @param $refund_type
     * @param $refund_explain
     * @return bool
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/3/1 14:46
     */
    public function refundOrder($order_id,$refund_type,$refund_explain){
        $orderRefund = new OrderRefund();
        $count = $orderRefund::find()
            ->where("order_id=:order_id and status>=:status")
            ->addParams([':order_id'=>$order_id,':status'=>0])
            ->count();
        if(!empty($count)){
            $this->addError('error','请不要重复提交');
            return false;
        }
        $model = Order::find()
            ->where("id=:id")
            ->addParams([':id'=>$order_id])
            ->select("id,order_sn,uid,pay_price,shipping_price,integral,pay_status,delivery_status,order_status")
            ->one();
        $pay_money      = $model->pay_price;
        $refund_money   = $pay_money;
        $refund_deposit = $pay_money; //退还余额
        $integral       = $model->integral;

        $refundText = $orderRefund::$refund_type;
        $refund_reason  = '其他原因';
        if(isset($refundText[$refund_type])){
            $refund_reason = $refundText[$refund_type];
        }
        $orderRefund->order_id          = $model->id;
        $orderRefund->order_sn          = $model->order_sn;
        $orderRefund->uid               = $model->uid;
        $orderRefund->order_goods_id    = 0;
        $orderRefund->model_type        = 1;
        $orderRefund->type              = 1;                    //售后类型(1、退款、2退货退款、3换货)
        $orderRefund->pay_money         = $pay_money;           //付款金额 含运费
        $orderRefund->refund_money      = $refund_money;        //退回金额
        $orderRefund->refund_deposit    = $refund_deposit;      //退还余额

        $orderRefund->refund_integral   = $integral;            //退还积分
        $orderRefund->refund_reason     = $refund_reason;         //退款类型 (如：不想买了)
        $orderRefund->refund_explain    = $refund_explain;      //退款说明
        $orderRefund->image             = '';                   //上传凭证(多个逗号隔开)
        if( !$orderRefund->save() ){
            $error = current($orderRefund->getFirstErrors());
            $this->addError('error',$error);
            return false;
        }else{
            return true;
        }
    }


    /**
     * 已发货  申请退款
     * @param $data
     * @return bool
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/29 23:56
     */
    public function refundGoods($data){

        if(isset($data['order_goods_id'])){
            $order_goods_id = $data['order_goods_id'];
        }else{
            $this->addError('error','缺省商品ID');//缺省商品ID
            return false;
        }
        if(isset($data['type'])){
            $type = $data['type'];
        }else{
            $this->addError('error','请选择服务类型');//服务类型
            return false;
        }
        if(isset($data['refund_type'])){
            $refund_type = $data['refund_type'];
        }else{
            $this->addError('error','请选择退货原因');//退货原因
            return false;
        }
        if(isset($data['refund_money'])){
            $refund_money = $data['refund_money'];
        }else{
            $this->addError('error','请填写退款金额');//退款金额
            return false;
        }
        if(isset($data['refund_explain'])){
            $refund_explain = $data['refund_explain'];
        }else{
            $this->addError('error','请填写退货描述');//退货描述
            return false;
        }
        if(isset($data['image'])){
            $image = $data['image'];
        }else{
            $this->addError('error','请上传照片');//请上传照片
            return false;
        }

        $integral           = 0;
        $model = OrderGoods::find()
            ->alias('a')
            ->where("a.id=:id")
            ->addParams([':id'=>$order_goods_id])
            ->leftJoin(Order::tableName().' b','a.order_id = b.id')
            ->select("a.id,a.order_id,a.goods_id,a.price,a.total_price goods_total_price,a.status,b.order_sn,b.uid,b.coupon_money,b.redbags_money,b.integral,b.integral_money,b.total_price,b.pay_price,b.shipping_price,b.delivery_status,b.integral,b.pay_status,b.order_status")
            ->asArray()
            ->one();//->one();

        if(empty($model)){
            $this->addError('error','订单不存在');
            return false;
        }elseif( $model['delivery_status'] != 1 || $model['status'] != 1){
            $this->addError('error','抱歉，由于您不满足条件，无法申请退款');
            return false;
        }
        /*$model->total_price;//商品支付价钱
        //$total_price  支付价钱
        $model->coupon_money;//优惠券
        $model->redbags_money;//红包
        $model->integral_money;//使用积分价钱*/

        $pay_money              = bcsub($model['pay_price'],$model['shipping_price'],2);
        $refund_money_system    = $pay_money;
        if( $pay_money != $model['total_price'] ){ // 存在优惠券
            // 判断有多少个商品 order_id
            $count = OrderGoods::find()
                ->where("order_id=:order_id")
                ->addParams([':order_id'=>$model['order_id']])
                ->count();
            if($count == 1 ){
                $refund_money_system        = $pay_money;
                if($refund_money == $refund_money_system){
                    $refund_integral        = $model['integral'];
                    $refund_integral_money  = $model['integral_money'];
                    $refund_coupon_money    = $model['coupon_money'];
                    $refund_redbags_money   = $model['redbags_money'];
                }else{
                    $multiple = bcdiv($refund_money,$refund_money_system,5);
                    $refund_integral        = bcmul($model['integral'],$multiple);
                    $refund_integral_money  = bcmul($model['integral_money'],$multiple);
                    $refund_coupon_money    = bcmul($model['coupon_money'],$multiple);
                    $refund_redbags_money   = bcmul($model['redbags_money'],$multiple);
                }
            }else{
                //多个商品 并查看是否是最后一个商品
                $count = OrderGoods::find()
                    ->where("order_id=:order_id and status=:status")
                    ->addParams([':order_id'=>$model['order_id'],':status'=>1])
                    ->count();
                if($count<=1){
                    // 最后一个
                    $volist = OrderRefund::find()
                        ->where("order_id=:order_id and status>=:status")
                        ->addParams([':order_id'=>$model['order_id'],':status'=>0])
                        ->select('refund_money,refund_integral,refund_integral_money,refund_coupon_money,refund_redbags_money')
                        ->asArray()
                        ->all();
                    $refund_money_system    = 0;
                    foreach ($volist as $val){
                        $refund_money_system    = bcadd($refund_money_system,$val['refund_money'],2);

                    }
                    $refund_money_system        = bcsub($model['pay_price'],$refund_money_system,2);//最大申请价钱
                    $multiple                   = bcdiv($refund_money,$refund_money_system,5);
                    $refund_integral        = bcmul($model['integral'],$multiple);
                    $refund_integral_money  = bcmul($model['integral_money'],$multiple);
                    $refund_coupon_money    = bcmul($model['coupon_money'],$multiple);
                    $refund_redbags_money   = bcmul($model['redbags_money'],$multiple);
                }else{
                    //多个
                //当前商品价钱 除于 全部商品价钱  *  当前商品价钱;
                $multiple = bcdiv($model['goods_total_price'],$model['total_price'],5);
                $refund_money_system = bcmul($pay_money,$multiple,2);
                    $multiple               = bcdiv($refund_money,$refund_money_system,5);
                    $refund_integral        = bcmul($model['integral'],$multiple);
                    $refund_integral_money  = bcmul($model['integral_money'],$multiple);
                    $refund_coupon_money    = bcmul($model['coupon_money'],$multiple);
                    $refund_redbags_money   = bcmul($model['redbags_money'],$multiple);
                }
            }

        }else{
            //没有优惠券 $refund_money
            $refund_money_system    = $model['goods_total_price'];
            $refund_integral        = 0;
            $refund_integral_money  = 0;
            $refund_coupon_money    = 0;
            $refund_redbags_money   = 0;
        }
        if($refund_money>$refund_money_system){
            $this->addError('error','最多可以申请退款'.$refund_money_system.'元');
            return false;
        }

        //$orderRefund = new OrderRefund();
        $orderRefund = new self();
        $refundText = $orderRefund::$refund_type;
        $refund_reason  = '其他原因';
        if(isset($refundText[$refund_type])){
            $refund_reason = $refundText[$refund_type];
        }
        $orderRefund->order_goods_id    = $order_goods_id;
        $orderRefund->order_id          = $model['order_id'];
        $orderRefund->order_sn          = $model['order_sn'];
        $orderRefund->uid               = $model['uid'];
        $orderRefund->model_type        = 2;
        $orderRefund->type              = $type;                //售后类型(1、退款、2退货退款、3换货)
        $orderRefund->pay_money         = $pay_money;           //付款金额 含运费
        $orderRefund->refund_money      = $refund_money_system;  //系统最多退回金额
        $orderRefund->refund_deposit    = $refund_money;         //退还余额

        $orderRefund->refund_integral           = $refund_integral;            //退还积分
        $orderRefund->refund_integral_money     = $refund_integral_money;            //积分金钱
        $orderRefund->refund_coupon_money       = $refund_coupon_money;            //优惠券金钱
        $orderRefund->refund_redbags_money      = $refund_redbags_money;            //红包金钱

        $orderRefund->refund_reason     = $refund_reason;         //退款类型 (如：不想买了)
        $orderRefund->refund_explain    = $refund_explain;      //退款说明
        $orderRefund->image             = $image;               //上传凭证(多个逗号隔开)
        //print_r($orderRefund);
        $transaction = Yii::$app->db->beginTransaction();  // 创建事务
        try {
            if( $orderRefund->save() ){
                if($refund_type == 1 ){
                    $status = 2;
                }elseif($refund_type==2) {
                    $status = 4;
                }else {
                    $status = 6;
                }
                if( !OrderGoods::updateAll(['status'=>$status],'id=:id',[':id'=>$order_goods_id]) ){
                    throw new \Exception('系统出错');
                }
                $transaction->commit();  // 提交
                return true;
            }else{
                $transaction->rollBack();  // 回滚
                $error = current($orderRefund->getFirstErrors());
                $this->addError('error',$error);
                return false;
            }
        }catch(\Exception $exception){
            $this->addError('error',$exception->getMessage());
            $transaction->rollBack();  // 回滚
            return false;
        }
    }

    /**
     * 退换货 发快递
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/3/4 15:27
     */
    public function refundGoodsExpress($data){
        if(!isset($data['id'])){
            $this->addError('error','抱歉，缺省退换货ID');
            return false;
        }elseif(!isset($data['express_name'])){
            $this->addError('error','请填写快递公司');
            return false;
        }elseif(!isset($data['express_sn'])){
            $this->addError('error','请填写快递单号');
            return false;
        }
        $data['express_time'] = time();


        $model = self::find()
            ->where("id=:id")
            ->addParams([':id'=>$data['id']])
            ->one();
        if($model->status != 1){
            $this->addError('error','系统出错');
            return false;
        }elseif($model->model_type != 2){
            $this->addError('error','系统出错');
            return false;
        }
        // 退货退款 //状态(0已取消,1正常,2退款中,3已退款,4换货中,5已换货)
        $status = 1;
        if($model->type == 2){
            $status = 2;
        }elseif($model->type == 3){ //换货
            $status = 4;
        }else{
            $this->addError('error','系统出错');
            return false;
        }

        $operation          = Json::decode($model->operation,true);
        $operation['express_name']  =   $data['express_name'];
        $operation['express_sn']    =   $data['express_sn'];
        $operation['express_time']  =   $data['express_time'];
        $model->status      = 2;
        $model->operation   = Json::encode($operation);

        $transaction = Yii::$app->db->beginTransaction();  // 创建事务
        try {
            if (!$model->save()) {
                $error = $model->getFirstErrors();
                throw new \Exception(current($error));
            }

            if(!OrderGoods::updateAll(['status' => $status,'updated_at'=>time()], 'id=:id', [':id' => $model->order_goods_id])){
                throw new \Exception('系统出错');
            }
            $transaction->commit();  // 提交
            return true;

        }catch(\Exception $exception){
            $this->addError('error',$exception->getMessage());
            $transaction->rollBack();  // 回滚
            return false;
        }

    }

    /**
     * 退款成功后。执行
     */
    public function OrderRefund($refund_id){

        $transaction = Yii::$app->db->beginTransaction();  // 创建事务
        try {
            $model = self::find()
                ->where("id=:id")
                ->addParams([':id' => $refund_id])
                ->one();

            if (empty($model)) {
                throw new \Exception('没有找到退款订单');
            }
            if ( $model->model_type == 1 ) { //订单退款

                if($model->status != 0){
                    throw new \Exception('没有权限操作');
                }

                $model -> status = 3;
                if( !$model->save() ){
                    $error = current($model->getFirstErrors());
                    throw new \Exception($error);
                }
                //更新数据
                $order = Order::find()
                    ->where("id=:id")
                    ->addParams([':id'=>$model->order_id])
                    ->one();
                if(empty($order)){
                    throw new \Exception('订单不存在');
                }
                if( $order->order_status != 1 ){
                    throw new \Exception('订单已关闭');
                }
                $order->order_status = 0;
                if( !$order->save() ){
                    $error = current($order->getFirstErrors());
                    throw new \Exception($error);
                }

                $transaction->commit();  // 提交
                return true;

            } elseif ( $model->model_type == 2 ) { //商品订单退款
                if($model->status != 2){
                    throw new \Exception('没有权限操作');
                }
                $model -> status = 3;
                if( !$model->save() ){
                    $error = current($model->getFirstErrors());
                    throw new \Exception($error);
                }
                $transaction->commit();  // 提交
                return true;
            }
        }catch(\Exception $exception){
            $transaction->rollBack();  // 回滚
            $this->addError('error',$exception->getMessage());
            return false;
        }
    }
}
