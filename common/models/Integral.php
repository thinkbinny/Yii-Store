<?php
namespace common\models;
use yii\behaviors\TimestampBehavior;
use Yii;



class Integral extends \yii\db\ActiveRecord{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%integral}}';
    }
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['description','remark'],'trim'],
            [['uid'],'required'],
            [['id','uid','amount','total','value','type','extime_time','source_id','status','created_at','updated_at'], 'integer'],
            [['description','remark'], 'string', 'max' => 200],
            [['type'], 'in', 'range' => [1, 2]],//增加积分、减少积分
            [['status'], 'in', 'range' => [0, 1, 2,3,4,5]], //（0已过期、1有效、2已扣除、3冻结中、4冻结返还、5冻结扣减）
            [['amount','total','value','extime_time','source_id'], 'default', 'value' => 0],
        ];
    }

    /**
     * @inheritdoc
     */

    public function attributeLabels()
    {
        return [
            'id'                => '积分明细ID',
            'uid'               => '用户UID',
            'amount'            => '数量',
            'total'             => '总数量',
            'value'             => '积分数量',//(可拆分)
            'type'              => '操作类型',//(增加积分、减少积分)
            'description'       => '描述/说明',
            'extime_time'       => '有效期',
            'remark'            => '管理员备注',
            'source_id'         => '积分来源ID',
            'status'            => '积分状态',//（0已过期、1有效、2已扣除、3冻结中、4冻结返还、5冻结扣减）
            'created_at'        => '创建时间',
            'updated_at'        => '更新时间',
        ];
    }

    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/30 14:18
     */
    public function behaviors() {
        return [
            TimestampBehavior::className(),
        ];
    }
    public function scenarios()
    {
        $scenarios =  parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios['value'] = 'value';
        return $scenarios;
    }

    /**
     * @var array
     */
    public static $type= [
        1 => '增加',
        2 => '减少',
    ];

    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/17 22:44
     */
    public function getType(){
        return self::$type;
    }

    /**
     * @return mixed
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/17 22:44
     */
    public function getTypeText(){
        return self::$type[$this->type];
    }

    /**
     * @param $uid
     * @param $amount
     * @return bool
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/18 16:22
     */
    public static function decUpdate($uid,$amount){
        $model  = new self();
        $model = $model::find()
            ->where("uid=:uid and type=:type and status=:status")
            ->addParams([':uid'=>$uid,':type'=>1,':status'=>1])
            ->select("id,value")
            ->orderBy(['created_at'=>SORT_ASC])
            ->one();
        $model->scenario = 'value';
        if($model->value <=$amount){
            $amount         = $amount - $model->value;//剩下的数量
            $model->value   = 0;
            $model->status  = 2;
            if(!$model->save()){
                throw new \Exception(current($model->getFirstErrors()));
            }
            if($amount>0){
                self::decUpdate($uid,$amount);
            }
        }else{
            $model->value = $model->value - $amount;
            if(!$model->save()){
                throw new \Exception(current($model->getFirstErrors()));
            }

        }


    }
    /**
     * inc dec
     * $type  inc 1增加 dec 2减少 deduct 冻结扣减 refund 冻结返还
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/17 22:50
     */
    public static function execute($uid,$type='inc',$amount=0,$source_id=0,$description='',$remark=''){
        //$transaction = Yii::$app->db->beginTransaction();  // 创建事务
        //开启事务
        try{
            if($type == 'inc'){
                $_model = new Member();
                $_model   = $_model::find()
                    ->where("uid=:uid")
                    ->addParams([':uid'=>$uid])
                    ->select("uid,integral")
                    ->one();
                if(empty($_model)){
                    throw new \Exception('查询会员信息出错！');
                }
                $total  = $_model->integral + $amount;
                $_model->integral       = $total;
                $_model->scenario       = 'integral';
                $model  = new self();
                $model->uid             = $uid;
                $model->total           = $total;
                $model->amount          = $amount;
                $model->value           = $amount;
                $model->type            = 1;
                $model->description     = $description;
                $model->extime_time     = strtotime('+1year');
                $model->remark          = $remark;
                $model->source_id       = $source_id;
                $model->status          = 1;
                if(!$model->save() || !$_model->save()){
                    throw new \Exception('添加积分出错！');
                }
                //$transaction->commit();  // 提交
                return ['status'=>true,'message'=>'操作成功'];

            }elseif($type == 'dec'){
                $_model = new Member();
                $_model   = $_model::find()
                    ->where("uid=:uid")
                    ->addParams([':uid'=>$uid])
                    ->select("uid,integral")
                    ->one();
                if(empty($_model)){
                    throw new \Exception('查询会员信息出错！');
                }
                $total  = $_model->integral - $amount;
                $_model->scenario       = 'integral';
                if($total<0){
                    throw new \Exception('积分不足！');
                }
                $_model->integral       = $total;

                if(!empty($source_id)){
                    $status = 3;
                }else{
                    $status = 5;
                    self::decUpdate($uid,$amount);//执行扣除记录
                }
                $model  = new self();
                $model->uid             = $uid;
                $model->total           = $total;
                $model->amount          = $amount;
                $model->value           = 0;
                $model->type            = 2;
                $model->description     = $description;
                $model->extime_time     = 0;
                $model->remark          = $remark;
                $model->source_id       = $source_id;
                $model->status          = $status;
                if(!$model->save() || !$_model->save()){
                    throw new \Exception('添加积分出错！');
                }

                //$transaction->commit();  // 提交
                return ['status'=>true,'message'=>'操作成功'];
            }elseif($type == 'deduct'){
                //self::updateAll(['status'=>5],'source_id=:source_id',[':source_id'=>$source_id]);
                $model  = self::find()
                    ->where("source_id=:source_id and status=:status")
                    ->addParams([':source_id'=>$source_id,':status'=>3])
                    ->select('uid,total')
                    ->one();
                if(empty($model)){
                    throw new \Exception('信息不存在！');
                }
                $uid    = $model->uid;
                $amount = $model->total;
                $model->status = 5;
                if(!$model->save()){
                    throw new \Exception('执行扣除出错！');
                }
                self::decUpdate($uid,$amount);//执行扣除记录
                //$transaction->commit();  // 提交 冻结扣减
                return ['status'=>true,'message'=>'操作成功'];
            }elseif($type == 'refund'){
                $model  = self::find()
                    ->where("source_id=:source_id and status=:status")
                    ->addParams([':source_id'=>$source_id,':status'=>3])
                    ->select('uid,total')
                    ->one();
                if(empty($model)){
                    throw new \Exception('信息不存在！');
                }
                $uid    = $model->uid;
                $amount = $model->total;
                $_model = new Member();
                $_model   = $_model::find()
                    ->where("uid=:uid")
                    ->addParams([':uid'=>$uid])
                    ->select("uid,integral")
                    ->one();
                if(empty($_model)){
                    throw new \Exception('查询会员信息出错！');
                }
                $_model->integral  = $_model->integral + $amount;
                $model->status = 4;//冻结返还
                if(!$model->save() || !$_model->save()){
                    throw new \Exception('执行返还出错！');
                }
                //$transaction->commit();  // 提交 冻结返还
                return ['status'=>true,'message'=>'操作成功'];
            }
        }catch(\Exception $exception){
            $message = $exception->getMessage();
            //$transaction->rollBack();  // 回滚
            $data = ['status'=>false,'message'=>$message];
            return $data;
        }
    }




}
