<?php
/**
 *继承公共会员表
 */
namespace backend\models;

use common\components\Func;
use common\models\User;
use Yii;
use yii\web\Response;


class Member extends \common\models\Member
{
    public $error;
    public $username;
    public $email;
    public $mobile;
    public $password;
    public $remarks;
    public $recharge_type = 'inc';
    public $recharge_money;
    public $recharge_integral;
    public $submit_type;
    public $resetpassword;//重置密码
    /**
     * @return array
     */
    public function rules() {
        return [
            [['nickname','username','email','mobile','password'], 'trim'],
            [['nickname','username','email','mobile','password'], 'required'],
            //用户昵称
            ['username', 'string', 'min' => 2, 'max' => 20],
            ['nickname', 'match','pattern'=>'/^[\x{4e00}-\x{9fa5}A-Za-z0-9_]{2,20}$/u','message' => '{attribute}必须中文、英文、下划线组合'],
            //用户注册
            ['username', 'string', 'min' => 2, 'max' => 50],
            ['username', 'match','pattern'=>'/^[A-Za-z]{1}([a-za-z0-9]|[._]){3,19}$/','message' => '{attribute}必须字母开头'],
            ['username', 'unique', 'targetClass' => '\common\models\User', 'message' => '{attribute}已经被占用了'],


            ['email', 'string', 'max' => 50],
            ['email', 'match', 'pattern'=>'/^([0-9A-Za-z\\-_\\.]+)@([0-9a-z]+\\.[a-z]{2,3}(\\.[a-z]{2})?)$/i'],
            ['email', 'unique', 'targetClass' => '\common\models\User', 'message' => '{attribute}已经被占用了'],
            //手机注册
            ['mobile', 'checkMobile'],//验证手机号码
            [['mobile'], 'unique', 'targetClass' => '\common\models\User','message'=>'{attribute}已经被占用了'],

            ['password', 'string', 'min' => 8,'max' => 32],
            ['password', 'match', 'pattern' => '/(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-Za-z0-9]{8,32}/','message'=>'必须包含大写小写字母+数字'],//{attribute}
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],

            [['username','email','mobile'], 'default', 'value' =>''],

            [['submit_type','recharge_money','recharge_integral','recharge_type'], 'required'],
            [['money','recharge_money'],'double'],
            [['integral','recharge_integral'],'integer'],
            [['remarks'],'safe'],
            ['money','rechargeMoney'],
            //['integral','rechargeIntegral'],
        ];
    }

    /**
     * 充值金额
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/5 23:33
     */
    public function rechargeMoney(){
        $recharge_money = $this->recharge_money;
        if($this->recharge_type == 'inc'){
            $this->money = bcadd($this->money,$recharge_money,2);
        }elseif($this->recharge_type == 'dec'){
            $money = bcsub($this->money,$recharge_money,2);
            if($money<0){
                $this->addError('recharge_money','不能小于'.$this->money);
            }else{
                $this->money = $money;
            }
        }else{
            $this->money = $recharge_money;
        }


    }

    /**
     * 充值积分
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/6 10:12
     */
    /*public function rechargeIntegral(){
        $recharge_integral  = $this->recharge_integral;
        if($this->recharge_type == 'inc'){
            $this->integral = $this->integral + $recharge_integral;
        }elseif($this->recharge_type == 'dec'){
            $integral = $this->integral - $recharge_integral;
            if($integral<0){
                $this->addError('recharge_integral','不能小于'.$this->integral);
            }else{
                $this->integral = $integral;
            }
        }else{
            $this->integral = $recharge_integral;
        }
    }*/

    /**验证之前**/
    public function beforeValidate(){

        if($this->scenario == 'recharge'){
            if($this->submit_type == 'money'){
                $this->scenario = 'recharge_money';
            }else{
                $this->scenario = 'recharge_integral';
            }
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $runValidation
     * @param null $attributeNames
     * @return bool
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/18 19:05
     */
    public function save($runValidation = true, $attributeNames = null)
    {

        if($this->scenario == 'recharge'){
            if($this->submit_type == 'money'){
                $this->scenario = 'recharge_money';
            }else{
                $this->scenario = 'recharge_integral';
            }
            $transaction = Yii::$app->db->beginTransaction();  // 创建事务
                try {
                    if($this->scenario == 'recharge_integral'){
                        $type = $this->recharge_type;
                        $data = Integral::execute($this->uid,$type,$this->recharge_integral,0,'平台客服操作',$this->remarks);
                        if($data['status']==false){
                            throw new \Exception($data['message']);
                        }
                    }elseif($this->scenario == 'recharge_money'){ //金钱
                        $type = $this->recharge_type;
                        $data = self::setProperty($this->uid,$type,1,$this->recharge_money,$this->remarks);
                        if($data['status']==false){
                            throw new \Exception($data['message']);
                        }
                    }elseif( !parent::save($runValidation, $attributeNames) ){
                        $error = current( $this->getFirstErrors() );
                        throw new \Exception($error);
                    }else{
                        throw new \Exception('系统出错');
                    }
                    $transaction->commit();  // 提交
                    return true;
                }catch(\Exception $exception){
                    header('content-type:application/'.Response::FORMAT_JSON.';charset=utf-8');
                    $message = $exception->getMessage();
                    $transaction->rollBack();  // 回滚
                    $data = ['status'=>false,'message'=>$message];
                    exit(json_encode($data));
                }

        }else{
            return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        }
    }

    /**
     * 检查手机号码
     * @return bool
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/5 23:34
     */
    public function checkMobile(){
        $is = Func::isMobile($this->mobile);
        if($is==false){
            $this->addError('mobile','手机号码格式不正确');
            return false;
        }
        return true;
    }
    /**
     * @return array
     */
    public function attributeLabels() {
        $data = parent::attributeLabels();
        $data['nickname']   = '用户昵称';
        $data['username']   = '登陆名称';
        $data['email']      = '电子邮箱';
        $data['mobile']     = '手机号码';
        $data['password']   = '登陆密码';
        $data['remarks']    = '备注';
        $data['recharge_type']    = '充值方式';
        $data['recharge_money']    = '变更金额';
        $data['recharge_integral']    = '变更数量';
        $data['resetpassword']    = '新密码';
        return $data;
        /*return [
            'nickname'              => '用户昵称',
            'username'              => '登陆名称',
            'email'                 => '电子邮箱',
            'mobile'                => '手机号码',
            'password'              => '登陆密码',

        ];*/
    }

    /**
     * @return array
     */
    public function scenarios() {
        $scenarios = parent::scenarios();
        $scenarios['create']  = [ 'username', 'password'];//'nickname',
        $scenarios['createORemail']  = [ 'username','email', 'password'];//'nickname',
        $scenarios['createORmobile']  = [ 'username','mobile', 'password'];//'nickname',
        $scenarios['createORemailORmobile']  = [ 'username','email','mobile', 'password'];//'nickname',
        $scenarios['switch']    = [ 'status'];
        $scenarios['grade']     = [ 'grade'];
        $scenarios['resetpassword']      = [ 'resetpassword'];

        $scenarios['recharge']           = [ 'submit_type','recharge_money','recharge_integral','recharge_type','remarks'];
        $scenarios['recharge_money']     = [ 'submit_type','recharge_money','money','recharge_type','remarks'];
        $scenarios['recharge_integral']  = [ 'submit_type','recharge_integral','integral','recharge_type','remarks'];


        return $scenarios;
    }
    public function getStatus(){
        return [
            self::STATUS_DELETED=>'禁止',
            self::STATUS_ACTIVE =>'正常',
        ];
    }

    /**
     * @return mixed
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2019/12/21 10:57
     */
    public function getStatusText(){
        $data = $this->getStatus();
        return $data[$this->status];
    }


    public function getRechargeType(){
        return [
            'inc'       => '增加',
            'dec'       => '减少',
            //'final'     => '最终积分',
        ];
    }


    /**
     * @return array|mixed|\yii\db\ActiveRecord[]
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2019/12/21 10:56
     */
    public function getGrade(){
        $data = MemberGrade::getUserGrade();
        $data = Func::array_column($data,'name','id');
        return $data;
    }

    /**
     * @return string|\yii\db\ActiveRecord
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2019/12/21 10:56
     */
    public function getGradeText(){
        $data = $this->getGrade();
        if(isset($data[$this->grade])){
            return $data[$this->grade];
        }else{
            return '--';
        }
    }
    /**
     * 创建后台用户
     */
     public function CreateUser(){

         if (!$this->validate()) { //print_r($this->getFirstErrors());exit;
             return false;
         }
         $user = new User();
         if(!empty($this->username)){
            $user->username      = $this->username;
         }
         if(!empty($this->email)) {
             $user->email = $this->email;
         }
         if(!empty($this->mobile)) {
             $user->mobile = $this->mobile;
         }
         $user->setPassword($this->password);
         $user->generateAuthKey();
         $trl = $user->save() ? $user : false; //getlastInsertID
         if($trl){
             if(empty($this->nickname)){
                 return true;
             }else{
                 $uid = Yii::$app->db->getLastInsertID();
                 $model = new \common\models\Member();
                 $model->uid        = $uid;
                 $model->nickname   = $this->nickname;
                 $model->status     = 1;
                 if($model->validate()){
                     return $model->save();
                 }else{
                     return false;
                 }
             }
         }
         return $trl;

     }
    /**
     * @param $ids
     * @param $val
     * @return bool|int
     */
    public function UpdateSwitch($ids,$val){
        /*if(self::STATUS_DELETED != $val && self::STATUS_ACTIVE != $val){
            return false;
        }*/
        $this->scenario = 'switch';
        if (!$this->validate()) {
            return false;
        }
        $ids  = (array)$ids;
        if(empty($ids)){
            return false;
        }

        $user = new \common\models\User();
        $result = static::updateAll(['status'=>$val],['in','uid',$ids]);
        if($result){
            return $user::updateAll(['status'=>$val],['in','id',$ids]);
        }else{
            return false;
        }
    }

    /**
     * @param $nickname
     * @return int|mixed
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/12 15:47
     */
    public static function getSearchUid($nickname){
        $data = self::find()
            ->where("nickname=:nickname")
            ->addParams([':nickname'=>$nickname])
            ->select('uid')
            ->one();
        if(empty($data)){
           return 0;
        }else{
            return $data->uid;
        }
    }

}
