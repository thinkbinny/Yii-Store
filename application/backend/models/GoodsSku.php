<?php
namespace backend\models;

use common\components\Func;
use Yii;

use common\models\GoodsSku as common;
use yii\helpers\ArrayHelper;


class GoodsSku extends common
{

    public function rules()
    {
        return [
            [['productcode','sku_attr_id'], 'trim'],
            [['price','stock','goods_weight'], 'required'],
            [['goods_id','image_id','stock','created_at','updated_at'], 'integer'],
            [['sku_attr_id','barcode','productcode'], 'string', 'max' => 100],
            [['price','orig_price','goods_weight'], 'double'],
            [['barcode','productcode'], 'default', 'value' =>''],
            [['orig_price','image_id'], 'default', 'value' =>0],
        ];
    }
    public function beforeSave($insert)
    {
        if(empty($this->orig_price) || $this->orig_price < $this->price){
            $this->orig_price = $this->price;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * 商品获取SKU
     * @param $goods_id
     * @return string
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/31 17:34
     */
    public static function getSkuList($goods_id){

        $volist = self::find()
            ->where("goods_id=:goods_id and sku_attr_id<>''")
            ->addParams([':goods_id'=>$goods_id])
            ->select("id,sku_attr_id,image_id,stock,price,orig_price,productcode,goods_weight")
            ->orderBy(['updated_at'=>SORT_ASC,'id'=>SORT_ASC])
            ->asArray()
            ->all();
        if(empty($volist)){
            $sku_list = null;
        }else{
            $sku_list = array();
            $attrData = array();
            foreach ($volist as $vo){
                $image_path = $vo['image_id']==0?'':Func::getImageUrl($vo['image_id']);
                $attr       = explode('_',$vo['sku_attr_id']);
                foreach ($attr as $value){
                    $attrData[] = GoodsAttrValue::findModelData($value);
                }

                $sku_list[] = [
                    'sku_id'        =>  $vo['id'],
                    'sku_attr_id'   =>  $vo['sku_attr_id'],
                    'form'=>[
                        'image_id'      =>  (int)$vo['image_id'],
                        'image_path'    =>  $image_path,//图片路径
                        'price'         =>  $vo['price'],
                        'orig_price'    =>  $vo['orig_price'],
                        'productcode'   =>  $vo['productcode'],
                        'stock'     =>  $vo['stock'],
                        'goods_weight'  =>  $vo['goods_weight'],
                    ]
                ];
            }
        }
        $sku_attr = self::getPowerset($attrData);
        //print_r($sku_attr);exit;
        //$sku_attr = GoodsAttrRelation::getSkuAttrList($goods_id);
        if($sku_attr == null){
            $sku_list = null;
        }
        $data = [
            'sku_attr'=>$sku_attr,
            'sku_list'=>$sku_list,
        ];
        return $data;
    }
    /**
     *取得集合的所有子集「幂集」
     */
    private static function getPowerset($data){
        $attribute = array();
        foreach ($data as $index => $value){
            $attribute[$value['name_id']]['attr_id']   = $value['name_id'];
            $attribute[$value['name_id']]['attr_name'] = $value['name'];
            $attribute[$value['name_id']]['attr_items'][$value['value_id']] = [
               'attr_value_id'   => $value['value_id'],
               'attr_name_value' => $value['value'],
            ];
        }
        //从新排
        $data = array();
        foreach ($attribute as $attr){
            $attr_items = array();
            foreach ($attr['attr_items'] as $value){
                $attr_items[] = $value;
            }
            $attr['attr_items'] = $attr_items;
            $data[] = $attr;
        }
        return $data;
    }
    /**
     * @param $goods_id
     * @param array $data
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/31 18:07
     */
    public static function setSku($goods_id,$newData = array()){
        $oldData = self::getOldSkuList($goods_id);
        if(empty($oldData)){
            self::addSku($goods_id,$newData);
        }else{
            self::updateSku($goods_id,$newData,$oldData);
        }
    }

    /**
     * @param $goods_id
     * @param $newData
     * @throws \Exception
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/31 20:02
     */
    public static function addSku($goods_id,$newData){
        $model = new self();
        foreach ($newData as $attributes){
            $form   = $attributes['form'];
            $_model = clone $model;
            $_model->goods_id       = $goods_id;
            $_model->sku_attr_id    = $attributes['sku_attr_id'];
            $_model->image_id       = $form['image_id'];
            $_model->stock          = $form['stock'];
            $_model->price          = $form['price'];
            $_model->price          = $form['price'];
            $_model->orig_price     = $form['orig_price'];
            $_model->productcode    = $form['productcode'];
            $_model->goods_weight   = $form['goods_weight'];
            if(!$_model->save()){
                throw new \Exception('保存商品SKU出错');
            }
        }
    }

    /**
     * @param $goods_id
     * @param $data
     * @param $oldData
     * @throws \Exception
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/31 20:02
     */
    public static function updateSku($goods_id,$newData,$oldData){
        $data = array();//组合新数组
        $key = 100;
        foreach ($newData as $value){
            $sku_id = $value['sku_id'];
            if(!empty($sku_id)){
                $data[$sku_id]      = $value;
            }else{
                $data[$key]      = $value;
                $key++;
            }
        }
        foreach ($oldData as $sku_id=> $sku_attr_id){
            if(isset($data[$sku_id])){
                $form     = $data[$sku_id]['form'];
                $model    = self::findOne($sku_id);
                $model->sku_attr_id    = $data[$sku_id]['sku_attr_id'];
                $model->image_id       = $form['image_id'];
                $model->stock          = $form['stock'];
                $model->price          = $form['price'];
                $model->price          = $form['price'];
                $model->orig_price     = $form['orig_price'];
                $model->productcode    = $form['productcode'];
                $model->goods_weight   = $form['goods_weight'];
                if(!$model->save()){
                    throw new \Exception('保存商品SKU出错！');
                }
                unset($data[$sku_id]);

            }else{
                $list = self::deleteAll("id=:id",[':id'=>$sku_id]);
                if(!$list){
                    throw new \Exception('保存商品SKU出错！');
                }
            }
        }
        if(!empty($data)){
            self::addSku($goods_id,$newData);
        }

        /*$i = 0;
        foreach ($oldData as $sku_id=> $sku_attr_id){
            if(isset($newData[$i])){
                $form     = $newData[$i]['form'];
                $model    = self::findOne($sku_id);
                $model->sku_attr_id    = $newData[$i]['sku_attr_id'];
                $model->image_id       = $form['image_id'];
                $model->stock          = $form['stock'];
                $model->price          = $form['price'];
                $model->price          = $form['price'];
                $model->orig_price     = $form['orig_price'];
                $model->productcode    = $form['productcode'];
                $model->goods_weight   = $form['goods_weight'];
                if(!$model->save()){
                    throw new \Exception('保存商品SKU出错！');
                }
                unset($newData[$i]);

            }else{
                $list = self::deleteAll("id=:id",[':id'=>$sku_id]);
                if(!$list){
                    throw new \Exception('保存商品SKU出错！');
                }
            }
            $i++;
        }
        if(!empty($newData)){
            self::addSku($goods_id,$newData);
        }*/
    }

    /**
     * 更新一条
     * @param $goods_id
     * @param $data
     * @throws \Exception
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/31 21:54
     */
    public static function updateSkuOne($goods_id,$data){

        $oldData = self::getOldSkuList($goods_id);
        if(empty($oldData)){
            $model = new self();
            $model->sku_attr_id     = '';
            $model->goods_id        = $goods_id;
            $model->image_id        = 0;
            $model->productcode     = $data['productcode'];
            $model->price           = $data['price'];
            $model->orig_price      = $data['orig_price'];
            $model->stock           = $data['stock'];
            $model->goods_weight    = $data['goods_weight'];
            if(!$model->save()){
                throw new \Exception('保存商品SKU出错！1');
            }
        }else{
            $key = 0;
            foreach ($oldData as $sku_id=> $sku_attr_id){
                if($key==0){
                    $model                  = self::findOne($sku_id);
                    $model->sku_attr_id     = '';
                    $model->productcode     = $data['productcode'];
                    $model->price           = $data['price'];
                    $model->orig_price      = $data['orig_price'];
                    $model->stock           = $data['stock'];
                    $model->goods_weight    = $data['goods_weight'];
                    if(!$model->save()){
                        throw new \Exception('保存商品SKU出错！1');
                    }
                }else{
                    $list = self::deleteAll("id=:id",[':id'=>$sku_id]);
                    if(!$list){
                        throw new \Exception('保存商品SKU出错！');
                    }
                }
                $key++;
            }
        }
    }
    /**
     * @param $goods_id
     * @return array|null|\yii\db\ActiveRecord[]
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/31 17:59
     */
    public static function getOldSkuList($goods_id){
        $model  = new self();
        $data   = $model::find()
            ->where("goods_id=:goods_id")
            ->addParams([':goods_id'=>$goods_id])
            ->select("id,sku_attr_id")
            ->asArray()
            ->orderBy(['updated_at'=>SORT_ASC,'id'=>SORT_ASC])
            ->all();
        if(empty($data)){
            return null;
        }
        $data = ArrayHelper::map($data,'id','sku_attr_id');
        return $data;
    }
}
