<?php
namespace backend\models;

use Yii;

use common\models\GoodsAttrValue as common;
use yii\web\Response;


class GoodsAttrValue extends common
{

    const STATUS_ACTIVE = 1;
    const STATUS_DELETED = 0;
    public function rules()
    {
        return [
            [['attr_id','value'], 'trim'],
            [['value'], 'required'],
            [['attr_id'], 'required'],
            [['attr_id','sort','status','created_at','updated_at'], 'integer'],
            [['value'], 'string', 'max' => 20],
            [['status'], 'default', 'value' =>1],
            [['sort'], 'default', 'value' =>50],
            ['value','default','value'=>''],
            //['value','verifyValue']
        ];
    }

    /**
     * @var array
     */
    public static $status = [
        self::STATUS_ACTIVE => '启用',
        self::STATUS_DELETED => '禁止',
    ];

    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/17 11:58
     */
    public function getStatus(){
        return self::$status;
    }

    protected function verifyValue($value){
        return self::find()
            ->where("attr_id=:attr_id and value=:value")
            ->addParams([':attr_id'=>$this->attr_id,':value'=>$value])
            ->count();
    }
    /**
     *自定义保存
     */
    public function save($runValidation = true, $attributeNames = null)
    {
        if($this->isNewRecord){
            if(strpos($this->value,',') !== false){
                //添加开启 事务
                $transaction = Yii::$app->db->beginTransaction();  // 创建事务
                try{
                    $volist = explode(',',$this->value);
                    $model  = new self();
                    $i      = 0;
                    foreach($volist as $val)
                    {
                        if(!self::verifyValue($val)){
                            $_model = clone $model;
                            $_model->attr_id     = $this->attr_id;
                            $_model->value       = $val;
                            if(!$_model->save()){
                                throw new \Exception('保存数据出错！');
                            }
                            $i++;
                        }
                    }
                    if($i>0){
                        $transaction->commit();  // 提交
                        return true;
                    }else{
                        $transaction->rollBack();  // 回滚
                        throw new \Exception('属性值已存在，不可重复添加！');
                    }
                }catch(\Exception $exception){
                    header('content-type:application/'.Response::FORMAT_JSON.';charset=utf-8');
                    $message = $exception->getMessage();
                    $transaction->rollBack();  // 回滚
                    $data = ['status'=>false,'message'=>$message];
                    exit(json_encode($data));
                }
            }else{
                if(self::verifyValue($this->value)){
                    header('content-type:application/'.Response::FORMAT_JSON.';charset=utf-8');
                    $data = ['status'=>false,'message'=>'属性值已存在，不可重复添加！'];
                    exit(json_encode($data));
                }
                return parent::save($runValidation, $attributeNames);
            }
        }else{

            $count = self::find()
                ->where("attr_id=:attr_id and value=:value and id<>:id")
                ->addParams([':attr_id'=>$this->attr_id,':value'=>$this->value,':id'=>$this->id])
                ->count();
            if(!empty($count)){
                header('content-type:application/'.Response::FORMAT_JSON.';charset=utf-8');
                $data = ['status'=>false,'message'=>'属性值已存在，不可重复添加！'];
                exit(json_encode($data));
            }
            return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        }
    }

}
