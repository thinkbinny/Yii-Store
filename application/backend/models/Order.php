<?php
namespace backend\models;
use common\components\Func;
use Yii;
use common\models\Order as common;
use yii\helpers\Html;
use yii\helpers\Json;
use yii\web\Response;


class Order extends common
{

    const STATUS_ACTIVE = 1;
    const STATUS_DELETED = 0;
    public $type;
    public $money;
    public $update_type;
    public $format_template;//格式模板

    public function rules()
    {
        return [
            [['update_type','shipping_code','shipping_company','shipping_sn'], 'trim'],

            [['update_type','shipping_price'],'required'],
            [['update_type'], 'string'],
            ['update_type', 'in', 'range' => ['inc','dec','final']],
            [['money','shipping_price'], 'double'],
            ['money','verifyMoney'],
            [['shipping_code',],'required','message'=>'请选择{attribute}'],
            [['shipping_sn'],'required'],
            [['shipping_code'], 'string','max' => 20],
            [['shipping_company','shipping_sn'], 'string','max' => 50],

            [['format_template',],'required','message'=>'请选择模板'],
            ['format_template', 'file', 'extensions' => ['csv']],

        ];
    }



    public function scenarios()
    {
        $scenarios =  parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios['update_price'] = ['pay_price','update_price','update_type','money','shipping_price'];
        $scenarios['delivery'] = ['delivery_status','delivery_time','shipping_company','shipping_code','shipping_sn'];
        $scenarios['batchdelivery'] = ['shipping_code','format_template'];
        return $scenarios;
    }

    /**
     * @param $attribute
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/11 18:58
     */
    public function verifyMoney($attribute){
        if(!empty($this->discount_id)){
            $this->addError($attribute,'订单使用优惠券，无法修改价钱');
            return false;
        }
        if(!empty($this->redbags_id)){
            $this->addError($attribute,'订单使用红包，无法修改价钱');
            return false;
        }
        if($this->$attribute<0){
            $this->addError($attribute,'变更金额必须大于或等于0');
        }else{
            if($this->update_type == 'dec'){
                $this->update_price = -$this->$attribute;
                $this->pay_price = bcadd($this->update_price,$this->total_price,2);
                if($this->total_price<$this->$attribute){
                    $this->addError($attribute,'变更金额不能大于订单总额');
                }
            }elseif($this->update_type == 'inc'){
                $this->addError($attribute,'不支持增加');
            }else{
                $this->update_price = bcsub($this->$attribute,$this->total_price,2);
                $this->pay_price    = bcadd($this->$attribute,$this->shipping_price,2);
            }
        }

    }

    /**
     * @var array
     */
    public static $update_type_list = [
        //'inc'   => '增加',
        'dec'   => '减少',
        'final' => '最终金额',
    ];

    public function attributeLabels()
    {
        return [
            'update_type'   =>'修改方式',
            'money'         =>'变更金额',
            'shipping_price'=>'运费费用',
            'shipping_sn'   =>'配送单号',
            'shipping_company'=>'物流公司',
            'shipping_code' =>'物流公司',
            'format_template' =>'导入发货模板',
        ];
    }
    public function beforeValidate()
    {
        if($this->scenario == 'batchdelivery'){
            $file = $_FILES['Order']['tmp_name']['format_template'];
            if(empty($file)){
                $this->addError('format_template','请选择模板');
                return false;
            }
            $info = pathinfo($_FILES['Order']['name']['format_template']);
            if($info['extension'] != 'csv'){
                $this->addError('format_template','只支持CSV文件格式模板');
                return false;
            }
            $data = Func::getCsv($file);
            if($data['status']==true){
                if(!is_array($data['data'])){
                    $this->addError('format_template','获取数据出错');
                    return false;
                }
                $this->format_template = $data['data'];//print_r($this->format_template);exit;
            }else{
                $this->addError('format_template',$data['message']);
                return false;
            }

        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if($this->isNewRecord){
            $this->addError('shipping_code','禁止添加');
            return false;
        }
        if($this->scenario == 'delivery'){
            $shipping = $this->getShippingCompanyText();
            $this->shipping_company = $shipping[$this->shipping_code];
            $this->delivery_status  = 1;
            $this->delivery_time    = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function save($runValidation = true, $attributeNames = null)
    {

        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }
    /**
     *
     */
    public function batchdelivery(){

        if($this->validate()){
            $shipping           = $this->getShippingCompanyText();
            $shipping_company   = $shipping[$this->shipping_code];
            $shipping_code      = $this->shipping_code;
            //print_r($this->format_template);exit;
            $delivery_time = time();
            foreach ($this->format_template as $key=> $vo){
                if($key>0){
                    $order_sn = trim($vo[0]);
                    $data = [
                        'shipping_company'  => $shipping_company,
                        'shipping_code'     => $shipping_code,
                        'shipping_sn'       => trim($vo[1]),
                        'delivery_status'   => 1,
                        'delivery_time'     => $delivery_time,
                        'updated_at'        => $delivery_time,
                    ];
                    self::updateAll($data,'delivery_status=:delivery_status and order_sn=:order_sn',[':delivery_status'=>0,':order_sn'=>$order_sn]);
                }
            }
            return true;
        }
        return false;

    }

    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/17 11:58
     */
    public function getUpdateType(){
        return self::$update_type_list;
    }


    /**关联商品信息**/
    public function getGoods(){
        return $this->hasMany(OrderGoods::className(), ['order_id' => 'id']);
    }

    /**
     * 关联收货地址
     */
    public function getAddress(){
        return $this->hasOne(OrderAddress::className(),['order_id'=>'id']);
    }

    /**
     * @param $image_id
     * @return mixed|string
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/10 21:40
     */
    public function getImageUrl($image_id){
        return Func::getImageUrl($image_id);
    }


    /**
     * 获取用户昵称
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/10 22:13
     */
    public function getNicknameText(){
        return Func::get_nickname($this->uid);
    }
    /**
     * @return mixed
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/22 0:03
     */
    public function getPayTypeText(){
        if($this->pay_type == 0){
            return '--';
        }else{
            $text = self::$pay_type[$this->pay_type];
            if($this->pay_type == 1){
                return Html::tag('span',$text,['class'=>'layui-btn layui-btn-xs layui-btn-normal']);
            }else{
                return Html::tag('span',$text,['class'=>'layui-btn layui-btn-xs']);
            }
        }


    }

    /**
     * 配送方式(1:快递配送,2:上门自提)
     * @var array
     */
    public static $delivery_type = [
        1=>'快递配送',
        2=>'上门自提',
    ];

    public function getDeliveryType(){
        return self::$delivery_type;
    }
    /**
     * @return mixed
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/22 0:03
     */
    public function getDeliveryTypeText(){
        $text =  self::$delivery_type[$this->delivery_type];
        if($this->delivery_type == 1){
            return Html::tag('span',$text,['class'=>'layui-btn layui-btn-xs layui-btn-normal']);
        }else{
            return Html::tag('span',$text,['class'=>'layui-btn layui-btn-xs']);
        }
    }

    public function getExtractShopIdText(){

        return Store::getFindListModel();

    }


    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/10 22:59
     */
    public function getPayStatusText(){
        if($this->pay_status == 1){
            return Html::tag('span','已付款',['class'=>'layui-btn layui-btn-xs']);
        }else{
            return Html::tag('span','未支付',['class'=>'layui-btn layui-btn-xs layui-bg-gray']);
        }
    }
    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/10 22:59
     */
    public function getDeliveryStatusText(){
        if($this->delivery_status == 1){
            return Html::tag('span','已发货',['class'=>'layui-btn layui-btn-xs']);
        }else{
            return Html::tag('span','待发货',['class'=>'layui-btn layui-btn-xs layui-bg-gray']);
        }
    }
    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/10 22:59
     */
    public function getReceiptStatusText(){
        if($this->receipt_status == 1){
            return Html::tag('span','已收货',['class'=>'layui-btn layui-btn-xs']);
        }else{
            return Html::tag('span','待收货',['class'=>'layui-btn layui-btn-xs layui-bg-gray']);
        }
    }

    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/10 22:59
     */
    public function getOrderStatusText(){
        if($this->order_status == 0){
            return Html::tag('span','已取消',['class'=>'layui-btn layui-btn-xs layui-bg-red']);
        }else{
            return null;
        }
    }

    /**
     * 获取地址
     * @return string
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/12 14:41
     */
    public function getAddressText(){
        $province_id = $this->address->province_id;    //省
        $city_id     = $this->address->city_id;        //市
        $district_id = $this->address->district_id;    //县区
        $text = Region::getAddressText($province_id,$city_id,$district_id);
        return $text . $this->address->detail;
    }

    /**
     * 获取快递公司
     * @return array|mixed|\yii\db\ActiveRecord[]
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/12 17:14
     */
    public function getShippingCompanyText(){

        return Logistics::getFindDataList();
    }
}
