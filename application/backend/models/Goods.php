<?php
namespace backend\models;
use common\components\Func;
use common\libs\Tree;
use yii\helpers\ArrayHelper;
use yii\web\Response;
use Yii;
use common\models\Goods as common;
use yii\helpers\Html;

class Goods extends common{
        /**
         *
         */
        public $image_data;
        public $sku_many;
        public $content;
        /**
         * @var array
         */
        public static $status = [
            1 => '上架',
            0 => '下架',
        ];

        /**
         * @return array
         * @Author 七秒记忆 <274397981@qq.com>
         * @Date 2020/1/25 14:23
         */
        public function attributeLabels(){
            $data = parent::attributeLabels();
            $data['image_data'] = '商品图片';
            $data['content']  = '商品详情';

            return $data;
        }

        public function getDeliveryId(){
            return Delivery::getFindDataList();
        }

        /**
         * @return array
         * @Author 七秒记忆 <274397981@qq.com>
         * @Date 2020/1/17 11:58
         */
        public function getStatus(){
            return self::$status;
        }

        /**
         * @return mixed|string
         * @Author 七秒记忆 <274397981@qq.com>
         * @Date 2020/1/17 11:58
         */
        public function getStatusText(){
            if(isset(self::$status[$this->status])){
                if($this->status==1){
                    return Html::tag('span',self::$status[$this->status],['class'=>'layui-btn layui-btn-xs']);
                }
                return Html::tag('span',self::$status[$this->status],['class'=>'layui-btn layui-btn-danger layui-btn-xs']);
            }else{
                return '--';
            }
        }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title','sellpoint'], 'trim'],
            [['title'], 'required'],
            [['category_id'],'required','message'=>'请选择{attribute}'],
            [['image_data'],'required','message'=>'请上传{attribute}'],
            [['deduct_stock_type','sku_type'],'required','message'=>'请选择{attribute}'],
            ['sku_type','in', 'range' => [1, 2]],
            [['price','stock','goods_weight'], 'required'],

            ["content", 'required'],
            [['is_free_shipping','delivery_id','status'],'required','message'=>'请选择{attribute}'],
            ["sort", 'required'],
            [['is_points_gift','is_points_discount','is_vip','is_fenxiao'],'required','message'=>'请选择{attribute}'],
            ["commission", 'required'],
            [['id','category_id','image_id','sku_type','deduct_stock_type','sales_initial','sales_actual','is_free_shipping','delivery_id','view','prom_id','prom_type','is_points_gift','is_points_discount','is_vip','is_fenxiao','sort','is_delete','status' ,'created_at','updated_at'], 'integer'],
            [['title'], 'string', 'max' => 200],
            [['sellpoint'], 'string', 'max' => 250],

            [['price','orig_price','goods_weight','commission'], 'double'],

            [['sales_initial','sales_actual','delivery_id','is_points_gift','is_points_discount','is_vip','is_fenxiao','sort','is_delete'], 'default', 'value' =>0],
            [['status'], 'default', 'value' =>1],
            [['commission'], 'default', 'value' =>0],
            [['view','prom_id','prom_type'], 'default', 'value' =>1],
            [['sort'], 'default', 'value' =>50],
            [['sku_many'], 'safe'],
            ['stock','stockVerify'],//库存数量
            ['orig_price','origPriceVerify'],//验证商品原价
            ['commission','commissionVerify'],//验证佣金

        ];
    }
    public function stockVerify($attribute){
        if(empty($this->$attribute)){
            $this->addError($attribute,'库存数量不能小于0');
        }
    }
    /**
     * @param $attribute
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date DateTime
     */
    public function origPriceVerify($attribute){
        if($this->$attribute<$this->price || empty($this->$attribute)){
            $this->addError($attribute,'商品原价必须大于'.$this->price.'元');
        }
    }
    public function commissionVerify($attribute){
        if($this->is_fenxiao == 1){
            if($this->$attribute<=0){
                $this->addError($attribute,'分销佣金必须小于0.01元');
            }elseif($this->$attribute >= $this->price){
                $this->addError($attribute,'分销佣金必须小于'.$this->price.'元');
            }
        }
    }
    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/26 13:03
     */
    public function scenarios()
    {
        $scenarios =  parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios['status'] = ['status'];
        $scenarios['delete'] = ['delete'];
        return $scenarios;
    }

    /**
     * @var array
     */
    public static $sku_type = [
        1=>'单规格',
        2=>'多规格',
    ];

    /**'
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/22 0:03
     */
    public function getSkuType(){
        return self::$sku_type;
    }

    /**
     * @return mixed
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/22 0:03
     */
    public function getSkuTypeText(){
        return self::$sku_type[$this->sku_type];
    }



    public static $deduct_stock_type = [
        '1'=>'下单减库存',
        '2'=>'付款减库存',
    ];

    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/22 0:53
     */
    public function getDeductStockType(){
        return self::$deduct_stock_type;
    }
    public function getDeductStockTypeText(){
        return self::$deduct_stock_type[$this->deduct_stock_type];
    }

    protected static $OpenClose = [
        '1'=>'开启',
        '0'=>'关闭',
    ];

    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/25 14:44
     */
    public function getIsPointsGift(){
        return self::$OpenClose;
    }
    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/25 14:44
     */
    public function getIsPointsDiscount(){
        return [
            '1'=>'允许',
            '0'=>'不允许',
        ];
    }
    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/25 14:44
     */
    public function getIsVip(){
        return self::$OpenClose;
    }
    /**
     * @return array
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/25 14:44
     */
    public function getIsFenxiao(){
        return self::$OpenClose;
    }

    public function getIsFreeShipping(){
        return [
            1 =>'是',
            0 =>'否',
        ];
    }

    /**
     * @return array|mixed|\yii\db\ActiveRecord[]
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/2 20:23
     */
    public function getCategoryId(){
        $data       = GoodsCategory::getGoodsList();
        $treeObj    = new Tree($data);
        $data       = $treeObj->getTree(0,'id','parent_id','name');
        return $data;
    }

    /**
     * @return \yii\db\ActiveRecord
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/2 20:23
     */
    public function getCategoryIdText(){
        $data = GoodsCategory::getGoodsList();
        $data = ArrayHelper::map($data,'id','name');
        return $data[$this->category_id];
    }

    /**
     * 验证之后前赋值
     * @return bool
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/25 22:08
     */
    public function beforeValidate()
    {


        if($this->sku_type == 2){ //多个
            $sku_many = $this->sku_many;
            $price          = 0;
            $orig_price     = 0;
            $goods_weight   = 0;
            $productcode    = '';
            $stock          = 0;
            foreach ($sku_many['data'] as $vo){
                $form           = $vo['form'];
                $goods_weight   = $form['goods_weight'];
                $productcode    = $form['productcode'];
                $stock          += $form['stock'];
                if($price>$form['price'] || $price==0){
                    $price =  $form['price'];
                }
                if($orig_price>$form['orig_price'] || $orig_price==0){
                    $orig_price =  $form['orig_price'];
                }
            }
            $this->price        = $price;
            $this->orig_price   = $orig_price;
            $this->goods_weight = $goods_weight;
            $this->productcode  = $productcode;
            $this->stock        = $stock;
        }
        if($this->is_free_shipping == 1){
            if(empty($this->delivery_id)){
                $this->delivery_id = 0;
            }
        }
        if($this->is_fenxiao == 0){
            if(empty($this->commission)){
                $this->commission = 0;
            }
        }
        if(empty($this->orig_price) || $this->orig_price ==0 ){
            $this->orig_price = $this->price;
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/2/26 12:39
     * 验证之后
     */
    public function afterValidate()
    {
        if(empty($this->image_data)){
            $this->addError('image_data','请上传商品图片');
            return false;
        }
        $this->image_id = current($this->image_data);
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * 事务保存信息
     */
    public function save($runValidation = true, $attributeNames = null)
    {
        if($this->isNewRecord){
            $transaction = Yii::$app->db->beginTransaction();  // 创建事务
            try{
                if(parent::save($runValidation, $attributeNames)){
                    $goods_id = Yii::$app->db->getLastInsertID();

                    //写入图片
                    $model  = new GoodsImage();
                    foreach ($this->image_data as $key=>$val){
                        $_model = clone $model;
                        $_model->goods_id = $goods_id;
                        $_model->image_id = $val;
                        $_model->sort     = $key;
                        if(!$_model->save()){
                            throw new \Exception('保存商品图片出错！');
                        }
                    }
                    //End 写入图片
                    //写入内容 GoodsDetail
                    $model = new GoodsDetail();
                    $model->goods_id     = $goods_id;
                    $model->content      = $this->content;
                    if (!$model->save()) {
                        throw new \Exception('保存商品内容出错！');
                    }
                    //End 写入内容 GoodsDetail

                    $model = new GoodsSku();
                    if($this->sku_type==2){  //多规则
                        $sku_many = $this->sku_many;
                        //写入多个SKU

                        foreach ($sku_many['data'] as $attributes){
                            $form   = $attributes['form'];
                            $_model = clone $model;
                            $_model->goods_id       = $goods_id;
                            $_model->sku_attr_id    = $attributes['sku_attr_id'];
                            $_model->image_id       = $form['image_id'];
                            $_model->stock          = $form['stock'];
                            $_model->price          = $form['price'];
                            $_model->orig_price     = $form['orig_price'];
                            $_model->productcode    = $form['productcode'];
                            $_model->goods_weight   = $form['goods_weight'];
                            if(!$_model->save()){
                                throw new \Exception('保存规格出错！');
                            }
                        }

                    }else{
                        $model->goods_id    = $goods_id;
                        $model->sku_attr_id = '';
                        $model->image_id    = 0;
                        $model->stock       = $this->stock;
                        $model->price       = $this->price;
                        $model->orig_price  = $this->orig_price;
                        $model->productcode = $this->productcode;
                        $model->goods_weight= $this->goods_weight;
                        if(!$model->save()){
                            throw new \Exception('保存规格出错！');
                        }
                    }
                    $transaction->commit();  // 提交
                    return true;
                }else{
                    $transaction->rollBack();  // 回滚
                    return false;
                }

            }catch(\Exception $exception){
                header('content-type:application/'.Response::FORMAT_JSON.';charset=utf-8');
                $message = $exception->getMessage();
                $transaction->rollBack();  // 回滚
                $data = ['status'=>false,'message'=>$message];
                exit(json_encode($data));

            }
        }else{
            //更新
            $transaction = Yii::$app->db->beginTransaction();  // 创建事务
            try{
                if(parent::save($runValidation, $attributeNames)){
                    $goods_id = $this->id;
                    //更新图片
                    GoodsImage::setImage($goods_id,$this->image_data);
                    //更新内容 GoodsDetail
                    GoodsDetail::updateAll(['content'=>$this->content],'goods_id=:goods_id',[':goods_id'=>$goods_id]);
                    //更新SKU
                    $model = new GoodsSku();
                    if($this->sku_type==1){ //单规则
                        //写入SKU
                        $data=[
                          'price'           => $this->price,
                          'orig_price'      => $this->orig_price,
                          'stock'           => $this->stock,
                          'goods_weight'    => $this->goods_weight,
                          'productcode'     => $this->productcode,
                        ];
                        $model::updateSkuOne($goods_id,$data);
                    }else{ //多规则
                        $sku_many = $this->sku_many;
                        //更新多个SKU
                        $data     = $sku_many['data'];//SKU数据
                        //$attr     = $sku_many['attr'];//属性
                        $model::setSku($goods_id,$data);
                        //End 写入多个SKU
                        //更新属性
                        //GoodsAttrRelation::setAttrRelation($goods_id,$attr);
                        //End 更新属性

                    }

                    $transaction->commit();  // 提交
                    return true;
                }else{
                    $transaction->rollBack();  // 回滚
                    return false;
                }
            }catch(\Exception $exception){
                header('content-type:application/'.Response::FORMAT_JSON.';charset=utf-8');
                $message = $exception->getMessage();
                $transaction->rollBack();  // 回滚
                $data = ['status'=>false,'message'=>$message];
                exit(json_encode($data));
            }

        }


    }

    /**
     * 获取图片路径
     */

    public function getImageUrl(){
        return Func::getImageUrl($this->image_id);
    }

    /**
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/3/7 11:40
     */
    public function getPromSeckillStatus(){
        $prom_id = $this->prom_id;
        $model = PromSeckill::find()
        ->where("id=:id")
        ->addParams([':id'=>$prom_id])
        ->select('status')
        ->one();
        if($model->status==1){
            return true;
        }else{
            return false;
        }
    }
}
