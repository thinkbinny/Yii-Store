<?php
namespace backend\models;

use common\components\Func;
use Yii;
use common\models\UploadGroup as common;
use yii\behaviors\TimestampBehavior;


class UploadGroup extends common
{

    public function rules()
    {
        return [
            ['name','trim'],
            [['name','type','sort'],'required'],
            [['id','uid','sort', 'created_at','updated_at'], 'integer'],
            ['type', 'string', 'max' => 10],
            ['name', 'string', 'max' => 20],
            ['sort', 'default', 'value' =>50],
        ];
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),

        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        Yii::$app->cache->delete("FileGroupDataText");
    }

    /**
     * @return array|\yii\db\ActiveRecord[]
     * @Author 七秒记忆 <274397981@qq.com>
     * @Date 2020/1/14 11:09
     */
    public static function getDataText(){
        $ket = 'FileGroupDataText';
        $data = Yii::$app->cache->get($ket);
        if($data===false){
            $data = self::find()
                ->where("uid=:uid and type=:type")
                ->addParams([":uid"=>0,':type'=>'image'])
                ->select("id,name")
                ->asArray()
                ->orderBy(['sort'=>SORT_ASC,'id'=>SORT_ASC])
                ->all();
            $data = Func::array_column($data,'name','id');
            Yii::$app->cache->set($ket,$data);
        }
        return $data;
    }

}
