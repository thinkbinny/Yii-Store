<?php
namespace backend\models;

use Yii;
use common\models\WxReply as Common;
use yii\behaviors\TimestampBehavior;
/**
 * This is the model class for table "{{%wx_reply}}".

 */
class WxReply extends Common
{
    private $_oldKey;
    public $keyword;
    const DISPLAY = 1;
    const HIDE = 0;
    public static $status = [
        self::DISPLAY => '正常',
        self::HIDE => '禁止',
    ];

    public static $statusStyles = [
        self::HIDE => 'label-warning',
        self::DISPLAY => 'label-info',
    ];


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),

        ];
    }
    public function scenarios()
    {
        return [
            'keyword'   => ['name','msg_type','content','media_id','keyword','status','type'],
            'autoreply' => ['msg_type','content','media_id'],
            'subscribe' => ['msg_type','content','media_id'],
            'status'    => ['status'],
        ];
        //return parent::scenarios(); // TODO: Change the autogenerated stub
    }

    /** scenarios
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name','msg_type','keyword'], 'required'],
            [['type','msg_type', 'created_at','updated_at'], 'integer'],
            [['name'], 'string', 'max' => 50],
            [['media_id'], 'string', 'max' => 64],
            [['content'], 'string', 'max' => 2000],
            [['keyword'], 'string', 'max' => 200],
            [['status','type'], 'default', 'value' =>1],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id'                => 'ID',
            'name'              => '规则名称',
            'type'              => 'KEY类型',
            'msg_type'          => '回复类型',
            'content'           => '回复内容',
            'media_id'          => '回复素材ID',
            'status'            => '规则状态',
            'created_at'        => '创建时间',
            'updated_at'        => '更新时间',
            'keyword'           => '关键字'
        ];
    }
    /*
     * 验证操作
     */
    public function afterValidate()
    {
        /*if($this->isNewRecord){
            $id = 0;
        }else{
            $id = $this->id;
        }*/
        if(!empty($this->keyword)){
            if(isset($this->id)){
                $wx_reply_id =  $this->id;
            }else{
                $wx_reply_id = 0;
            }
            $result = WxReplyKey::findKey($this->keyword,$wx_reply_id);
            if($result['status']==false){
                $this->addError('keyword',$result['message']);
                return false;
            }
        }

        if($this->msg_type==1){ //text
            if(empty($this->content)){
                $this->addError('content','回复内容不能为空。');
                return false;
            }
        }else{
            if(empty($this->media_id)){
                $this->addError('material_id','素材ID不能为空。');
                return false;
            }
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    /**
     *修改前的信息
     */
        public function afterFind()
        {
            parent::afterFind(); // TODO: Change the autogenerated stub
            $this->_oldKey = WxReplyKey::getFinds($this->id);

        }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * 保存之后执行
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if(!$this->isNewRecord){
            $insert = $this->id;
        }
        WxReplyKey::updateKey($insert,$this->_oldKey,$this->keyword);
    }

    /**
     * @return array
     * 删除内容
     */
    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
        WxReplyKey::deleteReply($this->id);
    }

    public function getStatus() {
        return self::$status;
    }

    /**
     * 获取菜单状态
     */
    public static function getStatusText($display) {
        return self::$status[$display];
    }

    public function getKeywordText($id){
        return WxReplyKey::getFinds($id);
    }


}
